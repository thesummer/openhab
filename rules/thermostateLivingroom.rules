var Timer disablePreheatTimer

rule "Startup"
when
    System started
then
   livingroomTemperatureComfort.sendCommand(22.0)
   livingroomTemperatureEco.sendCommand(16.0)
end

rule "Living room thermostate set state"
when
    Time cron "0 30 22 1/1 * ? *" or
    Time cron "0 45 8 1/1 * ? *"  or
    Item JanOnline changed or
    Item livingroomPreheat changed to OFF
then
    val turnOffTime = now.withTimeAtStartOfDay.plusHours(22).plusMinutes(30)
    val turnOnTime  = now.withTimeAtStartOfDay.plusHours(7).plusMinutes(30)

    if (JanOnline.state == OPEN && (now.isAfter(turnOnTime) && now.isBefore(turnOffTime)))
    {
        logInfo("LVHeaterStateChange", "Set to COMFORT (Jan " + JanOnline.state.toString())
        lrHeaterState.sendCommand("COMFORT")
    }
    else
    {
        logInfo("LVHeaterStateChange", "Set to ECO (Jan " + JanOnline.state.toString())
        lrHeaterState.sendCommand("ECO")
    }
end

rule "Living room enable preheat"
when 
    Item livingroomPreheat changed to ON
then
    lrHeaterState.sendCommand("COMFORT")
    logInfo("LVPreheatEnable", "Set heater to COMFORT")
    disablePreheatTimer = createTimer(now.plusHours(1),
                       [| livingroomPreheat.sendCommand(OFF)
                          logInfo("LVPreheatEnable", "Set preheat switch to OFF") ])
end

rule "Update current living room temperature"
when
    Item lrSetpoint changed or
    Item living_room_thermostat_CurrentTemperature changed
then
    logInfo("lrUpdateTemp", "Updating temperature display")
    lrCurrentTemp.sendCommand(living_room_thermostat_CurrentTemperature.state.toString() + " (" + lrSetpoint.state.toString() + ")")
end


rule "Living room heater set temperature"
when
    Item lrHeaterState changed or
    Item livingroomTemperatureComfort changed or
    Item livingroomTemperatureEco changed 
then
    logInfo("lrTemp", "Livingroom heater state set to " + lrHeaterState.state)
    if (lrSetpoint === null)
    {
        logInfo("lrTemp", "lrSetpoint is null")
    }
    switch (lrHeaterState.state)
    {
        case "MANUAL": 
        {
            logInfo("lrTemp", "Set current set point to " + livingroomTemperatureComfort.state.toString())
            
        }
        case "ECO":
        {
            logInfo("lrTemp", "Set current set point to " + livingroomTemperatureEco.state.toString())
            lrSetpoint.sendCommand(livingroomTemperatureEco.state.toString())
        }
        case "COMFORT":
        {
            logInfo("lrTemp", "Set current set point to " + livingroomTemperatureComfort.state.toString())
            lrSetpoint.sendCommand(livingroomTemperatureComfort.state.toString())
        }
    }
end
